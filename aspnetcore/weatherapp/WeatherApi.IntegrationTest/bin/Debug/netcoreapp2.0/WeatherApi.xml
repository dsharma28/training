<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WeatherApi</name>
    </assembly>
    <members>
        <member name="T:WeatherApi.Attributes.ValidateModelStateAttribute">
            <summary>
            Model state validation attribute
            </summary>
        </member>
        <member name="M:WeatherApi.Attributes.ValidateModelStateAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Called before the action method is invoked
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:WeatherApi.Controllers.WeatherApiController">
            <summary>
            
            </summary>
        </member>
        <member name="M:WeatherApi.Controllers.WeatherApiController.GetWeatherByZipCode(System.Nullable{System.Int32})">
            <summary>
            Get Weather By Zip Code
            </summary>
            <remarks>Get weather by Zip Code</remarks>
            <param name="zipcode">zipcode</param>
            <response code="200">successful operation</response>
            <response code="400">Invalid value</response>
            <response code="404">Not found</response>
            <response code="500">Unexpected Error has occurred</response>
        </member>
        <member name="T:WeatherApi.Filters.BasePathFilter">
            <summary>
            BasePath Document Filter sets BasePath property of Swagger and removes it from the individual URL paths
            </summary>
        </member>
        <member name="M:WeatherApi.Filters.BasePathFilter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="basePath">BasePath to remove from Operations</param>
        </member>
        <member name="P:WeatherApi.Filters.BasePathFilter.BasePath">
            <summary>
            Gets the BasePath of the Swagger Doc
            </summary>
            <returns>The BasePath of the Swagger Doc</returns>
        </member>
        <member name="M:WeatherApi.Filters.BasePathFilter.Apply(Swashbuckle.AspNetCore.Swagger.SwaggerDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            Apply the filter
            </summary>
            <param name="swaggerDoc">SwaggerDocument</param>
            <param name="context">FilterContext</param>
        </member>
        <member name="T:WeatherApi.Filters.GeneratePathParamsValidationFilter">
            <summary>
            Path Parameter Validation Rules Filter
            </summary>
        </member>
        <member name="M:WeatherApi.Filters.GeneratePathParamsValidationFilter.Apply(Swashbuckle.AspNetCore.Swagger.Operation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Constructor
            </summary>
            <param name="operation">Operation</param>
            <param name="context">OperationFilterContext</param>
        </member>
        <member name="T:WeatherApi.Models.Error">
            <summary>
            
            </summary>
        </member>
        <member name="P:WeatherApi.Models.Error.Code">
            <summary>
            Gets or Sets Code
            </summary>
        </member>
        <member name="P:WeatherApi.Models.Error.Message">
            <summary>
            Gets or Sets Message
            </summary>
        </member>
        <member name="P:WeatherApi.Models.Error.Fields">
            <summary>
            Gets or Sets Fields
            </summary>
        </member>
        <member name="M:WeatherApi.Models.Error.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:WeatherApi.Models.Error.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:WeatherApi.Models.Error.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:WeatherApi.Models.Error.Equals(WeatherApi.Models.Error)">
            <summary>
            Returns true if Error instances are equal
            </summary>
            <param name="other">Instance of Error to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:WeatherApi.Models.Error.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:WeatherApi.Models.Forecast">
            <summary>
            
            </summary>
        </member>
        <member name="P:WeatherApi.Models.Forecast.Zipcode">
            <summary>
            Zipcode of the location
            </summary>
            <value>Zipcode of the location</value>
        </member>
        <member name="P:WeatherApi.Models.Forecast.Day">
            <summary>
            day
            </summary>
            <value>day</value>
        </member>
        <member name="P:WeatherApi.Models.Forecast.High">
            <summary>
            High temperature
            </summary>
            <value>High temperature</value>
        </member>
        <member name="P:WeatherApi.Models.Forecast.Low">
            <summary>
            Low temperature
            </summary>
            <value>Low temperature</value>
        </member>
        <member name="P:WeatherApi.Models.Forecast.Detail">
            <summary>
            Forecast of the location
            </summary>
            <value>Forecast of the location</value>
        </member>
        <member name="M:WeatherApi.Models.Forecast.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:WeatherApi.Models.Forecast.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:WeatherApi.Models.Forecast.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:WeatherApi.Models.Forecast.Equals(WeatherApi.Models.Forecast)">
            <summary>
            Returns true if Forecast instances are equal
            </summary>
            <param name="other">Instance of Forecast to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:WeatherApi.Models.Forecast.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:WeatherApi.Program">
            <summary>
            Program
            </summary>
        </member>
        <member name="M:WeatherApi.Program.Main(System.String[])">
            <summary>
            Main
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:WeatherApi.Program.BuildWebHost(System.String[])">
            <summary>
            Build Web Host
            </summary>
            <param name="args"></param>
            <returns>Webhost</returns>
        </member>
        <member name="T:WeatherApi.Startup">
            <summary>
            Startup
            </summary>
        </member>
        <member name="M:WeatherApi.Startup.#ctor(Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="env"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:WeatherApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WeatherApi.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="loggerFactory"></param>
        </member>
    </members>
</doc>
