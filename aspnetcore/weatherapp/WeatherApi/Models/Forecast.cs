/*
 * Weather API
 *
 * This is a sample weather API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: deepak.h.sharma@capgemini.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace WeatherApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Forecast : IEquatable<Forecast>
    { 
        /// <summary>
        /// Zipcode of the location
        /// </summary>
        /// <value>Zipcode of the location</value>
        [DataMember(Name="zipcode")]
        public long? Zipcode { get; set; }

        /// <summary>
        /// day
        /// </summary>
        /// <value>day</value>
        [DataMember(Name="day")]
        public string Day { get; set; }

        /// <summary>
        /// High temperature
        /// </summary>
        /// <value>High temperature</value>
        [DataMember(Name="high")]
        public long? High { get; set; }

        /// <summary>
        /// Low temperature
        /// </summary>
        /// <value>Low temperature</value>
        [DataMember(Name="low")]
        public long? Low { get; set; }

        /// <summary>
        /// Forecast of the location
        /// </summary>
        /// <value>Forecast of the location</value>
        [DataMember(Name="detail")]
        public string Detail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Forecast {\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Forecast)obj);
        }

        /// <summary>
        /// Returns true if Forecast instances are equal
        /// </summary>
        /// <param name="other">Instance of Forecast to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Forecast other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Zipcode == other.Zipcode ||
                    Zipcode != null &&
                    Zipcode.Equals(other.Zipcode)
                ) && 
                (
                    Day == other.Day ||
                    Day != null &&
                    Day.Equals(other.Day)
                ) && 
                (
                    High == other.High ||
                    High != null &&
                    High.Equals(other.High)
                ) && 
                (
                    Low == other.Low ||
                    Low != null &&
                    Low.Equals(other.Low)
                ) && 
                (
                    Detail == other.Detail ||
                    Detail != null &&
                    Detail.Equals(other.Detail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Zipcode != null)
                    hashCode = hashCode * 59 + Zipcode.GetHashCode();
                    if (Day != null)
                    hashCode = hashCode * 59 + Day.GetHashCode();
                    if (High != null)
                    hashCode = hashCode * 59 + High.GetHashCode();
                    if (Low != null)
                    hashCode = hashCode * 59 + Low.GetHashCode();
                    if (Detail != null)
                    hashCode = hashCode * 59 + Detail.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Forecast left, Forecast right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Forecast left, Forecast right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
